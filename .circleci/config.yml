version: 2.1
jobs:
  build-and-test-server:
    docker:
      - image: circleci/node:12.16.2
      - image: circleci/redis
      - image: circleci/postgres:9.6-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ""
    working_directory: ~/app-server/server
    steps:
      - checkout:
          path: ~/app-server
      - restore_cache:
          name: Restore node_modules from cache
          keys:
            - v3-dependency-cache-{{ checksum "package.json" }}
      - run:
          name: get directory
          command: |
            . ./deploy.sh
            cat .env
      - run: sudo apt-get update
      - run: sudo apt-get install postgresql-client-9.6
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Set up test database
          command: |
            psql -c 'create database "observatory-test"' -U postgres -h localhost -p 5432
            psql -c "\l"  -U postgres -h localhost -p 5432
      - run:
          name: Install dependencies, run tests
          command: |
            npm i
            npm run test
            npm run build
      - save_cache:
          name: Save node_modules to cache
          key: v3-dependency-cache-{{ checksum "package.json" }}
          paths:
            - node_modules/
      - run:
          name: Move assets into deploy directory
          command: |
            mkdir api-deploy
            mv dist/ manifest.yml package.json ormconfig.js package-lock.json node_modules/ ./api-deploy
      - persist_to_workspace:
          root: ~/app-server/server
          paths:
            - api-deploy/

  deploy-server-staging:
    docker:
      - image: govau/cf-cli
    steps:
      - attach_workspace:
          at: ~/app-server/server
      - run:
          name: Deploy server to cloud.gov.au development
          command: |
            cd ~/app-server/server
            cd api-deploy/
            cf login -a $CF_API_STAGING -o $CF_ORG -s $CF_SPACE -u $CF_USERNAME -p $CF_PASSWORD_STAGING
            cf zero-downtime-push observatory-app-server -f manifest.yml

  build-and-test-front-end:
    docker:
      - image: circleci/node:12.16.2
    working_directory: ~/app-ui/client
    steps:
      - checkout:
          path: ~/app-ui
      - restore_cache:
          name: Restore node_modules from cache
          keys:
            - v3-dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Install dependencies
          command: |
            npm i
            npm run pancake
            npm run build
      - save_cache:
          name: Save node_modules to cache
          key: v3-dependency-cache-{{ checksum "package.json" }}
          paths:
            - node_modules/
      - run:
          name: Make deploy directory
          command: |
            mkdir front-end-deploy
            mv build/ manifest.yml ./front-end-deploy
      - persist_to_workspace:
          root: ~/app-ui/client
          paths:
            - front-end-deploy/

  deploy-front-end-staging:
    docker:
      - image: govau/cf-cli
    steps:
      - attach_workspace:
          at: ~/app-ui/client
      - run:
          name: Deploy to cloud.gov.au development
          command: |
            cd ~/app-ui/client
            cd front-end-deploy
            cf login -a $CF_API_STAGING -o $CF_ORG -s $CF_SPACE -u $CF_USERNAME -p $CF_PASSWORD_STAGING
            cf zero-downtime-push observatory-app -f manifest.yml

workflows:
  version: 2.1
  build-and-deploy:
    jobs:
      - build-and-test-server
      - deploy-server-staging:
          requires:
            - build-and-test-server
          filters:
            branches:
              only: development

      - build-and-test-front-end
      - deploy-front-end-staging:
          requires:
            - build-and-test-front-end
          filters:
            branches:
              only: development
